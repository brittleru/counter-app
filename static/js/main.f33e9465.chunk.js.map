{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","console","log","className","href","Counter","this","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","onDelete","id","classes","value","Component","Counters","prevProps","prevState","onReset","counters","map","key","App","state","handleIncrement","index","indexOf","setState","handleReset","c","handleDelete","counterId","filter","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wPAwBeA,EArBA,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEf,OADAC,QAAQC,IAAI,mBAEV,yBAAKC,UAAU,8BACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,4BAC4B,IAC1B,0BAAMD,UAAU,oCACbH,MC4BIK,G,6KAnCH,IAAD,OAEP,OADAJ,QAAQC,IAAI,sBAEV,6BAEE,0BAAMC,UAAWG,KAAKC,mBAAoBD,KAAKE,eAC/C,4BACEC,QAAU,kBAAM,EAAKC,MAAMC,YAAY,EAAKD,MAAME,UAClDT,UAAU,4BAFZ,aAKA,4BACEM,QAAS,kBAAM,EAAKC,MAAMG,SAAS,EAAKH,MAAME,QAAQE,KACtDX,UAAU,6BAFZ,a,wCASN,IAAIY,EAAU,mBAEd,OADAA,GAAwC,IAA7BT,KAAKI,MAAME,QAAQI,MAAc,UAAY,Y,oCAG3C,IACLA,EAAUV,KAAKI,MAAME,QAArBI,MAER,OADAf,QAAQC,IAAIc,GACK,IAAVA,EAAc,OAASA,M,GA5BVC,cCuCPC,E,iLArCMC,EAAWC,GAC5BnB,QAAQC,IAAI,YAAaiB,GACzBlB,QAAQC,IAAI,YAAakB,K,4CAMzBnB,QAAQC,IAAI,uB,+BAKZD,QAAQC,IAAI,uBADL,MAE4CI,KAAKI,MAAjDW,EAFA,EAEAA,QAASC,EAFT,EAESA,SAAUT,EAFnB,EAEmBA,SAAUF,EAF7B,EAE6BA,YACpC,OACE,6BACE,4BACEF,QAASY,EACTlB,UAAU,8BAFZ,SAKCmB,EAASC,KAAI,SAAAX,GAAO,OAClB,kBAAC,EAAD,CAEGY,IAAKZ,EAAQE,GACbD,SAAUA,EACVF,YAAaA,EACbC,QAASA,Y,GA7BAK,aC8DRQ,E,kDA1Db,aAAgB,IAAD,8BACb,gBAOFC,MAAQ,CACNJ,SAAU,CACR,CAACR,GAAI,EAAGE,MAAO,GACf,CAACF,GAAI,EAAGE,MAAO,GACf,CAACF,GAAI,EAAGE,MAAO,GACf,CAACF,GAAI,EAAGE,MAAO,KAbJ,EAiBfW,gBAAkB,SAAAf,GAChB,IAAMU,EAAQ,YAAO,EAAKI,MAAMJ,UAC1BM,EAAQN,EAASO,QAAQjB,GAC/BU,EAASM,GAAT,eAAsBhB,GACtBU,EAASM,GAAOZ,QAChB,EAAKc,SAAS,CAACR,SAASA,IACxBrB,QAAQC,IAAI,EAAKwB,MAAMJ,SAASM,KAvBnB,EA0BfG,YAAc,WACZ,IAAMT,EAAW,EAAKI,MAAMJ,SAASC,KAAI,SAAAS,GAEvC,OADAA,EAAEhB,MAAQ,EACHgB,KAET,EAAKF,SAAS,CAACR,SAAUA,KA/BZ,EAkCfW,aAAe,SAACC,GACd,IAAMZ,EAAW,EAAKI,MAAMJ,SAASa,QAAO,SAAAH,GAAC,OAAIA,EAAElB,KAAOoB,KAC1D,EAAKJ,SAAS,CAACR,SAAUA,KAlCzBrB,QAAQC,IAAI,mBAFC,E,gEAMbD,QAAQC,IAAI,iB,+BAmCZ,OADAD,QAAQC,IAAI,kBAEV,kBAAC,IAAMkC,SAAP,KACE,kBAAC,EAAD,CACEpC,cAAeM,KAAKoB,MAAMJ,SAASa,QAAO,SAAAH,GAAC,OAAIA,EAAEhB,MAAQ,KAAGqB,SAC9D,0BAAMlC,UAAU,aACd,kBAAC,EAAD,CACEmB,SAAUhB,KAAKoB,MAAMJ,SACrBD,QAASf,KAAKyB,YACdpB,YAAaL,KAAKqB,gBAClBd,SAAUP,KAAK2B,qB,GAnDThB,aCMEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,a","file":"static/js/main.f33e9465.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\n\r\n// Statless Functional Component\r\nconst NavBar = ({totalCounters}) => {\r\n  console.log(\"NavBar-Rendered\");\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-dark\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Number of active counters{\" \"}\r\n        <span className=\"badge badge-pill badge-secondary\">\r\n          {totalCounters}\r\n        </span>\r\n      </a>\r\n\r\n    </nav>\r\n  );\r\n}\r\n\r\n// class NavBar extends Component {\r\n//     render() {\r\n//\r\n//     }\r\n// }\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    console.log(\"Counter - Randered\");\r\n    return(\r\n      <div>\r\n\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button\r\n          onClick={ () => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm\">\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"btn btn-danger btn-sm m-2\">Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\ngetBadgeClasses() {\r\n  let classes = \"badge m-2 badge-\";\r\n  classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n  return classes;\r\n}\r\nformatCount() {\r\n  const { value } = this.props.counter;\r\n  console.log(value);\r\n  return value === 0 ? \"Zero\" : value;\r\n}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default Counter;\r\n","import React, {Component} from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log(\"prevProps\", prevProps);\r\n    console.log(\"prevState\", prevState);\r\n    // if(prevProps.counter.value !== this.props.counter.value) {\r\n    //   // Ajax call and get new data from the server\r\n    // }\r\n  }\r\n  componetWillUnmount() {\r\n    console.log(\"Counter - Unmount\");\r\n  }\r\n\r\n\r\n  render() {\r\n    console.log(\"Counters - Rendered\");\r\n    const {onReset, counters, onDelete, onIncrement} = this.props;\r\n    return (\r\n      <div>\r\n        <button\r\n          onClick={onReset}\r\n          className=\"btn btn-primary btn-sm m-2\">\r\n          Reset\r\n        </button>\r\n        {counters.map(counter => (\r\n           <Counter\r\n              \r\n              key={counter.id}\r\n              onDelete={onDelete}\r\n              onIncrement={onIncrement}\r\n              counter={counter}>\r\n\r\n           </Counter>\r\n         ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, {Component} from \"react\";\nimport NavBar from \"./components/navbar\";\nimport './App.css';\nimport Counters from \"./components/counters\";\n\n\nclass App extends Component {\n  constructor () {\n    super();\n    console.log(\"App-Constructor\");\n  }\n  componentDidMount() {\n    // Ajax Call\n    console.log(\"App-Mounted\");\n  }\n  state = {\n    counters: [\n      {id: 1, value: 4},\n      {id: 2, value: 0},\n      {id: 3, value: 0},\n      {id: 4, value: 0}\n    ]\n  };\n\n  handleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = {...counter};\n    counters[index].value++;\n    this.setState({counters:counters})\n    console.log(this.state.counters[index]);\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c=> {\n      c.value = 0;\n      return c;\n    })\n    this.setState({counters: counters});\n  };\n\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({counters: counters});\n  };\n\n  render() {\n    console.log(\"App - Rendered\");\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}/>\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}